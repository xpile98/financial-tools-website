{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ywcho\\\\Desktop\\\\React\\\\financial-tools-website\\\\src\\\\components\\\\AveragePriceCalculator.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Typography, TextField, Button, Box } from '@mui/material';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport CalculatorLayout from './CalculatorLayout';\nimport { formatCurrency, formatNumberWithCommas, parseFormattedNumber } from '../utils/currencyUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AveragePriceCalculator = () => {\n  _s();\n  const [currentAvgPrice, setCurrentAvgPrice] = useState('');\n  const [currentQuantity, setCurrentQuantity] = useState('');\n  const [currentPrice, setCurrentPrice] = useState('');\n  const [targetAvgPrice, setTargetAvgPrice] = useState('');\n  const [result, setResult] = useState(null);\n  const [currency, setCurrency] = useState('KRW');\n  const [chartData, setChartData] = useState([]);\n  const handleAmountChange = setter => event => {\n    const value = event.target.value;\n    const numericValue = parseFormattedNumber(value);\n    setter(formatNumberWithCommas(numericValue));\n  };\n  const calculateAveragePrice = () => {\n    const avgPrice = parseFloat(parseFormattedNumber(currentAvgPrice));\n    const quantity = parseFloat(parseFormattedNumber(currentQuantity));\n    const price = parseFloat(parseFormattedNumber(currentPrice));\n    const targetAvg = parseFloat(parseFormattedNumber(targetAvgPrice));\n    if (avgPrice > 0 && quantity > 0 && price > 0 && targetAvg > 0 && targetAvg < avgPrice) {\n      const additionalQuantity = quantity * (avgPrice - targetAvg) / (targetAvg - price);\n      const additionalCost = Math.ceil(additionalQuantity) * price;\n      setResult({\n        additionalQuantity: Math.ceil(additionalQuantity),\n        additionalCost: additionalCost\n      });\n      setChartData([{\n        name: '현재 평균 단가',\n        value: avgPrice\n      }, {\n        name: '목표 평균 단가',\n        value: targetAvg\n      }, {\n        name: '현재 주식 수량',\n        value: quantity\n      }, {\n        name: '필요 추가 수량',\n        value: Math.ceil(additionalQuantity)\n      }]);\n    } else {\n      alert('입력값을 확인해주세요. 목표 평단가는 현재 평단가보다 작아야 합니다.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(CalculatorLayout, {\n    currency: currency,\n    onCurrencyChange: setCurrency,\n    title: \"\\uD3C9\\uB2E8\\uAC00 \\uACC4\\uC0B0\\uAE30\",\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      component: \"form\",\n      noValidate: true,\n      autoComplete: \"off\",\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        label: \"\\uD604\\uC7AC \\uD3C9\\uB2E8\\uAC00\",\n        value: currentAvgPrice,\n        onChange: handleAmountChange(setCurrentAvgPrice),\n        fullWidth: true,\n        margin: \"normal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"\\uD604\\uC7AC \\uC218\\uB7C9\",\n        value: currentQuantity,\n        onChange: handleAmountChange(setCurrentQuantity),\n        fullWidth: true,\n        margin: \"normal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"\\uD604\\uC7AC \\uC8FC\\uAC00\",\n        value: currentPrice,\n        onChange: handleAmountChange(setCurrentPrice),\n        fullWidth: true,\n        margin: \"normal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"\\uBAA9\\uD45C \\uD3C9\\uB2E8\\uAC00\",\n        value: targetAvgPrice,\n        onChange: handleAmountChange(setTargetAvgPrice),\n        fullWidth: true,\n        margin: \"normal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: calculateAveragePrice,\n        sx: {\n          mt: 2\n        },\n        children: \"\\uACC4\\uC0B0\\uD558\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), result && /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: \"\\uACB0\\uACFC:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        children: [\"\\uD544\\uC694 \\uC218\\uB7C9: \", formatNumberWithCommas(result.additionalQuantity), \"\\uC8FC\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        children: [\"\\uD544\\uC694 \\uAE08\\uC561: \", formatCurrency(result.additionalCost, currency)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this), chartData.length > 0 && /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 4,\n        height: 400\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        gutterBottom: true,\n        children: \"\\uD3C9\\uB2E8\\uAC00 \\uBC0F \\uC218\\uB7C9 \\uBE44\\uAD50\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        width: \"100%\",\n        height: \"100%\",\n        children: /*#__PURE__*/_jsxDEV(BarChart, {\n          data: chartData,\n          margin: {\n            top: 5,\n            right: 30,\n            left: 20,\n            bottom: 5\n          },\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n            strokeDasharray: \"3 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: \"name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n            formatter: value => formatNumberWithCommas(value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Bar, {\n            dataKey: \"value\",\n            fill: \"#8884d8\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(AveragePriceCalculator, \"OR++tpnR4gywT3mn8bWkJyH69RA=\");\n_c = AveragePriceCalculator;\nexport default AveragePriceCalculator;\nvar _c;\n$RefreshReg$(_c, \"AveragePriceCalculator\");","map":{"version":3,"names":["React","useState","Typography","TextField","Button","Box","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","CalculatorLayout","formatCurrency","formatNumberWithCommas","parseFormattedNumber","jsxDEV","_jsxDEV","AveragePriceCalculator","_s","currentAvgPrice","setCurrentAvgPrice","currentQuantity","setCurrentQuantity","currentPrice","setCurrentPrice","targetAvgPrice","setTargetAvgPrice","result","setResult","currency","setCurrency","chartData","setChartData","handleAmountChange","setter","event","value","target","numericValue","calculateAveragePrice","avgPrice","parseFloat","quantity","price","targetAvg","additionalQuantity","additionalCost","Math","ceil","name","alert","onCurrencyChange","title","children","component","noValidate","autoComplete","label","onChange","fullWidth","margin","fileName","_jsxFileName","lineNumber","columnNumber","variant","onClick","sx","mt","length","height","gutterBottom","width","data","top","right","left","bottom","strokeDasharray","dataKey","formatter","fill","_c","$RefreshReg$"],"sources":["C:/Users/ywcho/Desktop/React/financial-tools-website/src/components/AveragePriceCalculator.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Typography, TextField, Button, Box } from '@mui/material';\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\nimport CalculatorLayout from './CalculatorLayout';\r\nimport { formatCurrency, formatNumberWithCommas, parseFormattedNumber } from '../utils/currencyUtils';\r\n\r\nconst AveragePriceCalculator = () => {\r\n  const [currentAvgPrice, setCurrentAvgPrice] = useState('');\r\n  const [currentQuantity, setCurrentQuantity] = useState('');\r\n  const [currentPrice, setCurrentPrice] = useState('');\r\n  const [targetAvgPrice, setTargetAvgPrice] = useState('');\r\n  const [result, setResult] = useState(null);\r\n  const [currency, setCurrency] = useState('KRW');\r\n  const [chartData, setChartData] = useState([]);\r\n\r\n  const handleAmountChange = (setter) => (event) => {\r\n    const value = event.target.value;\r\n    const numericValue = parseFormattedNumber(value);\r\n    setter(formatNumberWithCommas(numericValue));\r\n  };\r\n\r\n  const calculateAveragePrice = () => {\r\n    const avgPrice = parseFloat(parseFormattedNumber(currentAvgPrice));\r\n    const quantity = parseFloat(parseFormattedNumber(currentQuantity));\r\n    const price = parseFloat(parseFormattedNumber(currentPrice));\r\n    const targetAvg = parseFloat(parseFormattedNumber(targetAvgPrice));\r\n\r\n    if (avgPrice > 0 && quantity > 0 && price > 0 && targetAvg > 0 && targetAvg < avgPrice) {\r\n      const additionalQuantity = (quantity * (avgPrice - targetAvg)) / (targetAvg - price);\r\n      const additionalCost = Math.ceil(additionalQuantity) * price;\r\n\r\n      setResult({\r\n        additionalQuantity: Math.ceil(additionalQuantity),\r\n        additionalCost: additionalCost,\r\n      });\r\n\r\n      setChartData([\r\n        { name: '현재 평균 단가', value: avgPrice },\r\n        { name: '목표 평균 단가', value: targetAvg },\r\n        { name: '현재 주식 수량', value: quantity },\r\n        { name: '필요 추가 수량', value: Math.ceil(additionalQuantity) },\r\n      ]);\r\n    } else {\r\n      alert('입력값을 확인해주세요. 목표 평단가는 현재 평단가보다 작아야 합니다.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <CalculatorLayout currency={currency} onCurrencyChange={setCurrency} title=\"평단가 계산기\">\r\n      <Box component=\"form\" noValidate autoComplete=\"off\">\r\n        <TextField\r\n          label=\"현재 평단가\"\r\n          value={currentAvgPrice}\r\n          onChange={handleAmountChange(setCurrentAvgPrice)}\r\n          fullWidth\r\n          margin=\"normal\"\r\n        />\r\n        <TextField\r\n          label=\"현재 수량\"\r\n          value={currentQuantity}\r\n          onChange={handleAmountChange(setCurrentQuantity)}\r\n          fullWidth\r\n          margin=\"normal\"\r\n        />\r\n        <TextField\r\n          label=\"현재 주가\"\r\n          value={currentPrice}\r\n          onChange={handleAmountChange(setCurrentPrice)}\r\n          fullWidth\r\n          margin=\"normal\"\r\n        />\r\n        <TextField\r\n          label=\"목표 평단가\"\r\n          value={targetAvgPrice}\r\n          onChange={handleAmountChange(setTargetAvgPrice)}\r\n          fullWidth\r\n          margin=\"normal\"\r\n        />\r\n        <Button variant=\"contained\" onClick={calculateAveragePrice} sx={{ mt: 2 }}>\r\n          계산하기\r\n        </Button>\r\n      </Box>\r\n      {result && (\r\n        <Box sx={{ mt: 2 }}>\r\n          <Typography variant=\"h6\">결과:</Typography>\r\n          <Typography>필요 수량: {formatNumberWithCommas(result.additionalQuantity)}주</Typography>\r\n          <Typography>필요 금액: {formatCurrency(result.additionalCost, currency)}</Typography>\r\n        </Box>\r\n      )}\r\n      {chartData.length > 0 && (\r\n        <Box sx={{ mt: 4, height: 400 }}>\r\n          <Typography variant=\"h6\" gutterBottom>평단가 및 수량 비교</Typography>\r\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n            <BarChart\r\n              data={chartData}\r\n              margin={{\r\n                top: 5,\r\n                right: 30,\r\n                left: 20,\r\n                bottom: 5,\r\n              }}\r\n            >\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"name\" />\r\n              <YAxis />\r\n              <Tooltip formatter={(value) => formatNumberWithCommas(value)} />\r\n              <Legend />\r\n              <Bar dataKey=\"value\" fill=\"#8884d8\" />\r\n            </BarChart>\r\n          </ResponsiveContainer>\r\n        </Box>\r\n      )}\r\n    </CalculatorLayout>\r\n  );\r\n};\r\n\r\nexport default AveragePriceCalculator;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}